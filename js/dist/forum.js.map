{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ER,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,+BCLvD,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,yB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,mC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,uB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,uB,aCGnCC,EAAAA,WAGnB,aAAc,KAFPC,yBAEO,EACZC,KAAKD,oBAAsBE,IAAO,I,2BAGpCC,KAAA,SAAKC,GACHH,KAAKD,oBAAL,UAA6BC,KAAKD,sBAAlC,CAAyDI,M,EAG3DC,OAAA,SAAOD,GACLH,KAAKD,oBAAoBC,KAAKD,sBAAsBM,QAAO,SAACC,GAAD,OAAgBA,IAAOH,O,EAGpFI,IAAA,SAAIJ,GACF,OAAOH,KAAKD,sBAAsBS,SAASL,I,EAhB1BL,GCHN,SAASW,EAAgB3B,EAAG4B,GAKzC,OAJAD,EAAkB1B,OAAO4B,eAAiB5B,OAAO4B,eAAeC,OAAS,SAAyB9B,EAAG4B,GAEnG,OADA5B,EAAE+B,UAAYH,EACP5B,GAEF2B,EAAgB3B,EAAG4B,GCJb,SAASI,EAAeC,EAAUC,GAC/CD,EAAS1B,UAAYN,OAAOkC,OAAOD,EAAW3B,WAC9C0B,EAAS1B,UAAU6B,YAAcH,EACjCJ,EAAeI,EAAUC,GCJ3B,MAAM,EAA+BrB,OAAOC,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,kC,aCcnCsB,EAAAA,SAAAA,G,wIACnBC,WAA8B,E,EAC9BC,eAAyB,E,EACzBC,mBAA6B,G,EAC7BC,mBAAoC,K,EACpCC,OAAS,IAAIC,K,oCAEbC,UAAA,WACE,MAAO,kB,EAGTC,MAAA,WACE,OAAOC,IAAAA,WAAAA,MAAqB,uC,EAG9BC,QAAA,WAAU,WACR,OACE,SAAKH,UAAU,cACb,UAAMA,UAAU,OAAOI,SAAU9B,KAAK8B,SAASlB,KAAKZ,OAClD,SAAK0B,UAAU,cACb,eAAQE,IAAAA,WAAAA,MAAqB,8CAA+C,CAAEG,MAAO/B,KAAKgC,MAAMC,QAAQC,UACxG,WAAOR,UAAU,cAAcS,UAAQ,EAACzC,MAAOM,KAAKgC,MAAMC,QAAQG,KAAK,SAEzE,SAAKV,UAAU,cACb,EAAC,IAAD,CAAQW,MAAOrC,KAAKqB,cAAeiB,SAAU,kBAAO,EAAKjB,eAAiB,EAAKA,gBAC5EO,IAAAA,WAAAA,MAAqB,iDAGzB5B,KAAKqB,cACJ,SAAKK,UAAU,cACb,WAAOa,IAAI,mBAAmBX,IAAAA,WAAAA,MAAqB,iDACnD,OAAGF,UAAU,YAAYE,IAAAA,WAAAA,MAAqB,iDAC9C,WAAOtB,GAAG,kBAAkBoB,UAAU,cAAcc,UAAU,EAAMC,QAAS,SAACC,GAAD,OAAa,EAAKpB,mBAAqBoB,EAAEC,OAAOjD,UAG/H,SAAKgC,UAAU,cACb,WAAOa,IAAI,eAAeX,IAAAA,WAAAA,MAAqB,6CAQ/C,EAAC,IAAD,CACES,MAAOrC,KAAKwB,OACZoB,OAAQ5C,KAAKgC,MAAMa,WAAWvC,KAC9BwC,SAAU,SAACD,GAAD,OAA6B,EAAKtB,mBAAqBsB,EAAWvC,SAIlF,SAAKoB,UAAU,4BACb,EAAC,IAAD,CACEA,UAAU,yBACVqB,KAAK,SACLC,QAA4B,WAAnBhD,KAAKoB,UACd6B,SAA6B,UAAnBjD,KAAKoB,YAA2BpB,KAAKuB,qBAAuBvB,KAAKsB,oBAE1EM,IAAAA,WAAAA,MAAqB,wCAExB,EAAC,IAAD,CACEF,UAAU,SACVwB,QAASlD,KAAKmD,QAAQvC,KAAKZ,MAC3BgD,QAA4B,UAAnBhD,KAAKoB,UACd6B,SAA6B,WAAnBjD,KAAKoB,YAA4BpB,KAAKuB,qBAAuBvB,KAAKsB,oBAE3EM,IAAAA,WAAAA,MAAqB,2C,EAQlCwB,KAAA,WACE,IAAMA,EAAgC,CACpCC,mBAAoBrD,KAAKgC,MAAMa,WAAWvC,KAC1C2B,QAASjC,KAAKgC,MAAMC,SAUtB,OAPIjC,KAAKqB,eACP+B,EAAK/B,eAAgB,EACrB+B,EAAK9B,mBAAqBtB,KAAKsB,oBAE/B8B,EAAK7B,mBAAqBvB,KAAKuB,mBAG1B6B,G,EAGTD,QAAA,WAAU,WACRnD,KAAK8B,SAAS,MAAM,GAAMwB,MAAK,SAACC,GAC9B,OAAQA,EAASH,KAAKI,WAAWC,QAC/B,IAAK,kBACH,EAAKC,WAAa,CAAEX,KAAM,QAASlB,QAASD,IAAAA,WAAAA,MAAqB,wDACjE,MAEF,IAAK,cACH,EAAK8B,WAAa,CAAEX,KAAM,UAAWlB,QAASD,IAAAA,WAAAA,MAAqB,oDACnE,MAEF,IAAK,eACH,EAAK8B,WAAa,CAAEX,KAAM,UAAWlB,QAASD,IAAAA,WAAAA,MAAqB,qDAOvE+B,EAAEC,a,EAIN9B,SAAA,SAASY,EAAQS,GAAkB,WAC7BT,GAAGA,EAAEmB,iBAET7D,KAAKoB,UAAY+B,EAAU,QAAU,SACrC,IAAIW,EAAM,kBAIV,OAFIX,IAASW,GAAO,UAEblC,IAAAA,QACI,CACPmC,OAAQ,OACRD,IAAK,GAAGlC,IAAAA,MAAAA,UAAoB,WAAakC,EACzCE,KAAM,CAAEZ,KAAMpD,KAAKoD,QACnBa,aAAc,SAACvB,GACb,IAAMwB,EAAQxB,EAAEa,SAASY,OAAO,GAGhC,GAFA,EAAK/C,WAAY,EAEE,sCAAf8C,EAAME,KACR,MAAM1B,EAGR,EAAKgB,WAAa,CAChBX,KAAM,QACNlB,QAASD,IAAAA,WAAAA,MAAqB,mEAGhC+B,EAAEC,YAGLN,MAAK,SAACC,GAQL,OAPA,EAAKnC,WAAY,EACZ+B,IACHQ,EAAEC,SACFS,OAAOC,SAASC,SAChB3C,IAAAA,MAAAA,SAGK2B,M,EAtJMpC,CAAsDqD,KCd3E,MAAM,EAA+B7E,OAAOC,KAAKC,OAAO,8B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,0B,aCGnC4E,EAAAA,SAAAA,G,oFACnBC,KAAA,WACE,MAAO,uB,EAGTC,eAAA,WACE,MAAO,iD,EAGTC,gBAAA,WACE,IACMxB,EADOpD,KAAKgC,MAAM6C,KACDhD,UAEvB,MAAO,CACLiD,kBACE,EAAC,IAAD,CAAMpD,UAAU,6BAA6BqD,KAAMnD,IAAIoD,MAAM,kBAAmB,CAAE1E,GAAI8C,EAAK7B,mBAAoB0D,KAAM7B,EAAK8B,UACvH9B,EAAK+B,uBAGVpD,MAAOqB,EAAKrB,Q,EAnBG0C,CAAsBW,KCH3C,MAAM,EAA+BzF,OAAOC,KAAKC,OAAO,iC,ICGnCwF,EAAAA,SAAAA,G,oFACnBX,KAAA,WACE,MAAO,uB,EAGTK,KAAA,WACE,OAAOnD,IAAIoD,MAAM,aAAc,CAAE1E,GAAIN,KAAKgC,MAAMsD,aAAazD,UAAUN,sB,EAGzEM,QAAA,WACE,OAAOD,IAAI2D,WAAWC,MAAM,uDAAwD,CAClFL,sBACE,UAAMzD,UAAU,2CAA2C1B,KAAKgC,MAAMsD,aAAazD,UAAUsD,0B,EAZhFE,C,MAA8BI,ICenD7D,IAAAA,aAAAA,IAAqB,2BAA2B,WAoB9C,GAlBA8D,IAAAA,UAAAA,aAAoCC,IAAAA,UAAgB,iBAEpDC,EAAAA,EAAAA,QAAOF,IAAAA,UAAsB,UAAU,SAAUG,GAC3C7F,KAAK8F,gBACPD,EAAOE,IACL,aACA,EAAC,IAAD,CAAOhD,KAAK,iBAAiBiD,MAAOpE,IAAAA,WAAAA,MAAqB,oDAAqD8C,KAAK,yBAClH,OAMP9C,IAAAA,eAAAA,UAA+B6C,EAG/B7C,IAAAA,uBAAAA,UAAuCyD,EAElCzD,IAAAA,KAAAA,UAAAA,GAAAA,WAAAA,aAAL,CAIA,IAAMS,EAAQ,IAAIvC,GAElB8F,EAAAA,EAAAA,QAAOK,IAAAA,UAAuB,UAAU,WACtCjG,KAAKkG,QAAQC,OAAM,kBAAM9D,EAAMtC,6BAGjC6F,EAAAA,EAAAA,QAAOQ,IAAAA,UAAgB,WAAW,SAAUC,GACJ,YAAlCrG,KAAKgC,MAAM6C,KAAKyB,eAA+BjE,EAAM9B,IAAIP,KAAKgC,MAAM6C,KAAKvE,OAC3E+F,EAAQnG,KAAK,oBAIjB0F,EAAAA,EAAAA,QAAOK,IAAAA,UAAuB,eAAe,SAAUM,GACjDlE,EAAM9B,IAAIP,KAAKgC,MAAM6C,KAAKvE,OAC5BiG,EAAMR,IACJ,SACA,UAAMrE,UAAU,cACbgD,IAAK,uBADR,IACiC9C,IAAAA,WAAAA,MAAqB,4CAM5DgE,EAAAA,EAAAA,QAAOY,IAAAA,UAA0B,YAAY,WAC3CnE,EAAMtC,oBAAoB,QAG5B6F,EAAAA,EAAAA,QAAOY,IAAAA,UAA0B,gBAAgB,SAAUD,GAAO,WAC5DlE,EAAMtC,sBAAsBmC,QAC9BqE,EAAMR,IACJ,YACA,EAAC,IAAD,CACErB,KAAK,sBACLhD,UAAU,SACVwB,QAAS,kBACPtB,IAAAA,MAAAA,KAAeT,EAAgB,CAC7Bc,QAASI,EAAMtC,sBACf8C,WAAY,EAAKA,eAIpBjB,IAAAA,WAAAA,MAAqB,gDACtB,UAAMF,UAAU,0BAA0BW,EAAMtC,sBAAsBmC,cAM9E0D,EAAAA,EAAAA,QAAOa,IAAc,sBAAsB,SAAUF,EAAO1B,GAC1D,GAA2B,YAAvBA,EAAKyB,cAAT,CAEA,IAAMI,EAAYrE,EAAM9B,IAAIsE,EAAKvE,MAAQ,SAAW,OAEpDiG,EAAMR,IACJ,WACA,EAAC,IAAD,CACErB,KAAK,qBACLxB,QAAS,WACW,SAAdwD,EACFrE,EAAMnC,KAAK2E,EAAKvE,MAEhB+B,EAAMjC,OAAOyE,EAAKvE,MAGpBqD,EAAEC,WAGHhC,IAAAA,WAAAA,MAAA,+BAAoD8E,c","sources":["webpack://@sycho/flarum-move-posts/webpack/bootstrap","webpack://@sycho/flarum-move-posts/webpack/runtime/compat get default export","webpack://@sycho/flarum-move-posts/webpack/runtime/define property getters","webpack://@sycho/flarum-move-posts/webpack/runtime/hasOwnProperty shorthand","webpack://@sycho/flarum-move-posts/webpack/runtime/make namespace object","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/extend']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['forum/app']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/components/Button']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/components/Badge']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['forum/components/Post']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/Model']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/utils/Stream']\"","webpack://@sycho/flarum-move-posts/./src/forum/states/DiscussionPageState.ts","webpack://@sycho/flarum-move-posts/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@sycho/flarum-move-posts/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['uikit/forum/DiscussionSearch']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['forum/states/GlobalSearchState']\"","webpack://@sycho/flarum-move-posts/./src/forum/components/MovePostsModal.tsx","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['forum/components/EventPost']\"","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['common/components/Link']\"","webpack://@sycho/flarum-move-posts/./src/forum/components/PostMovedPost.tsx","webpack://@sycho/flarum-move-posts/external root \"flarum.core.compat['forum/components/Notification']\"","webpack://@sycho/flarum-move-posts/./src/forum/components/PostMovedNotification.tsx","webpack://@sycho/flarum-move-posts/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Badge'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/PostControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/Stream'];","import type StreamType from 'mithril/stream';\nimport Stream from 'flarum/common/utils/Stream';\n\nexport default class DiscussionPageState {\n  public selectedPostsToMove: StreamType;\n\n  constructor() {\n    this.selectedPostsToMove = Stream([]);\n  }\n\n  push(postId: number): void {\n    this.selectedPostsToMove([...this.selectedPostsToMove(), postId]);\n  }\n\n  remove(postId: number): void {\n    this.selectedPostsToMove(this.selectedPostsToMove().filter((id: number) => id !== postId));\n  }\n\n  has(postId: number): boolean {\n    return this.selectedPostsToMove().includes(postId);\n  }\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['uikit/forum/DiscussionSearch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/GlobalSearchState'];","import app from 'flarum/forum/app';\nimport Button from 'flarum/common/components/Button';\nimport Modal from 'flarum/common/components/Modal';\nimport Switch from 'flarum/common/components/Switch';\nimport DiscussionSearch from 'flarum/uikit/forum/DiscussionSearch';\nimport { ComponentAttrs } from 'flarum/common/Component';\nimport type Discussion from 'flarum/common/models/Discussion';\nimport GlobalSearchState from 'flarum/forum/states/GlobalSearchState';\n\nexport interface MovePostsModalAttrs extends ComponentAttrs {\n  discussion: Discussion;\n  postIds: number[];\n}\n\nexport default class MovePostsModal<T extends MovePostsModalAttrs> extends Modal<T> {\n  isLoading: string | boolean = false;\n  newDiscussion: boolean = false;\n  newDiscussionTitle: string = '';\n  targetDiscussionId: number | null = null;\n  search = new GlobalSearchState();\n\n  className() {\n    return 'MovePostsModal';\n  }\n\n  title() {\n    return app.translator.trans('sycho-move-posts.forum.modal.title');\n  }\n\n  content() {\n    return (\n      <div className=\"Modal-body\">\n        <form className=\"Form\" onsubmit={this.onsubmit.bind(this)}>\n          <div className=\"Form-group\">\n            <label>{app.translator.trans('sycho-move-posts.forum.modal.selected_posts', { count: this.attrs.postIds.length })}</label>\n            <input className=\"FormControl\" readonly value={this.attrs.postIds.join(', ')} />\n          </div>\n          <div className=\"Form-group\">\n            <Switch state={this.newDiscussion} onchange={() => (this.newDiscussion = !this.newDiscussion)}>\n              {app.translator.trans('sycho-move-posts.forum.modal.new_discussion')}\n            </Switch>\n          </div>\n          {this.newDiscussion ? (\n            <div className=\"Form-group\">\n              <label for=\"discussion_name\">{app.translator.trans('sycho-move-posts.forum.modal.discussion_name')}</label>\n              <p className=\"helptext\">{app.translator.trans('sycho-move-posts.forum.modal.discussion_help')}</p>\n              <input id=\"discussion_name\" className=\"FormControl\" required={true} oninput={(e: any) => (this.newDiscussionTitle = e.target.value)} />\n            </div>\n          ) : (\n            <div className=\"Form-group\">\n              <label for=\"destination\">{app.translator.trans('sycho-move-posts.forum.modal.destination')}</label>\n              {/*<input\n                id=\"destination\"\n                className=\"FormControl\"\n                type=\"number\"\n                required={true}\n                onchange={(e: any) => (this.targetDiscussionId = e.target!.value)}\n              />*/}\n              <DiscussionSearch\n                state={this.search}\n                ignore={this.attrs.discussion.id()}\n                onSelect={(discussion: Discussion) => (this.targetDiscussionId = discussion.id())}\n              />\n            </div>\n          )}\n          <div className=\"Form-group Form-controls\">\n            <Button\n              className=\"Button Button--primary\"\n              type=\"submit\"\n              loading={this.isLoading === 'submit'}\n              disabled={this.isLoading === 'check' || (!this.targetDiscussionId && !this.newDiscussionTitle)}\n            >\n              {app.translator.trans('sycho-move-posts.forum.modal.submit')}\n            </Button>\n            <Button\n              className=\"Button\"\n              onclick={this.emulate.bind(this)}\n              loading={this.isLoading === 'check'}\n              disabled={this.isLoading === 'submit' || (!this.targetDiscussionId && !this.newDiscussionTitle)}\n            >\n              {app.translator.trans('sycho-move-posts.forum.modal.check')}\n            </Button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  data() {\n    const data: Record<string, unknown> = {\n      sourceDiscussionId: this.attrs.discussion.id(),\n      postIds: this.attrs.postIds,\n    };\n\n    if (this.newDiscussion) {\n      data.newDiscussion = true;\n      data.newDiscussionTitle = this.newDiscussionTitle;\n    } else {\n      data.targetDiscussionId = this.targetDiscussionId;\n    }\n\n    return data;\n  }\n\n  emulate() {\n    this.onsubmit(null, true).then((response: any) => {\n      switch (response.data.attributes.status) {\n        case 'old_to_new_move':\n          this.alertAttrs = { type: 'error', content: app.translator.trans('sycho-move-posts.forum.modal.status.old_to_new_move') };\n          break;\n\n        case 'simple_move':\n          this.alertAttrs = { type: 'success', content: app.translator.trans('sycho-move-posts.forum.modal.status.simple_move') };\n          break;\n\n        case 'complex_move':\n          this.alertAttrs = { type: 'warning', content: app.translator.trans('sycho-move-posts.forum.modal.status.complex_move') };\n          break;\n\n        default:\n          break;\n      }\n\n      m.redraw();\n    });\n  }\n\n  onsubmit(e: any, emulate: boolean) {\n    if (e) e.preventDefault();\n\n    this.isLoading = emulate ? 'check' : 'submit';\n    let url = '/api/posts/move';\n\n    if (emulate) url += '/check';\n\n    return app\n      .request({\n        method: 'POST',\n        url: `${app.forum.attribute('baseUrl')}${url}`,\n        body: { data: this.data() },\n        errorHandler: (e: any) => {\n          const error = e.response.errors[0];\n          this.isLoading = false;\n\n          if (error.code !== 'move_old_post_to_newer_discussion') {\n            throw e;\n          }\n\n          this.alertAttrs = {\n            type: 'error',\n            content: app.translator.trans('sycho-move-posts.forum.error.move_old_post_to_newer_discussion'),\n          };\n\n          m.redraw();\n        },\n      })\n      .then((response: any) => {\n        this.isLoading = false;\n        if (!emulate) {\n          m.redraw();\n          window.location.reload();\n          app.modal.close();\n        }\n\n        return response;\n      });\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/EventPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","import EventPost from 'flarum/forum/components/EventPost';\nimport Link from 'flarum/common/components/Link';\n\nexport default class PostMovedPost extends EventPost {\n  icon() {\n    return 'fas fa-exchange-alt';\n  }\n\n  descriptionKey() {\n    return 'sycho-move-posts.forum.post_stream.post_moved';\n  }\n\n  descriptionData() {\n    const post = this.attrs.post;\n    const data: any = post.content();\n\n    return {\n      target_discussion: (\n        <Link className=\"EventPost-PostMoved-target\" href={app.route('discussion.near', { id: data.targetDiscussionId, near: data.number })}>\n          {data.targetDiscussionTitle}\n        </Link>\n      ),\n      count: data.count,\n    };\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Notification'];","import Notification from 'flarum/forum/components/Notification';\nimport { truncate } from 'flarum/common/utils/string';\n\nexport default class PostMovedNotification extends Notification {\n  icon() {\n    return 'fas fa-exchange-alt';\n  }\n\n  href() {\n    return app.route('discussion', { id: this.attrs.notification.content().targetDiscussionId });\n  }\n\n  content() {\n    return app.translator.trans('sycho-move-posts.forum.notifications.post_moved_text', {\n      targetDiscussionTitle: (\n        <span className=\"MovePosts-Notification-targetDiscussion\">{this.attrs.notification.content().targetDiscussionTitle}</span>\n      ),\n    });\n  }\n}\n","import { extend, override } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport Button from 'flarum/common/components/Button';\nimport Badge from 'flarum/common/components/Badge';\nimport Post from 'flarum/forum/components/Post';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport icon from 'flarum/common/helpers/icon';\nimport Discussion from 'flarum/common/models/Discussion';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Model from 'flarum/common/Model';\n\nimport DiscussionPageState from './states/DiscussionPageState';\nimport MovePostsModal from './components/MovePostsModal';\nimport PostMovedPost from './components/PostMovedPost';\nimport PostMovedNotification from './components/PostMovedNotification';\n\napp.initializers.add('sycho/flarum-move-posts', () => {\n  // @ts-ignore\n  Discussion.prototype.isFirstMoved = Model.attribute('isFirstMoved');\n\n  extend(Discussion.prototype, 'badges', function (badges: ItemList) {\n    if (this.isFirstMoved()) {\n      badges.add(\n        'firstMoved',\n        <Badge type=\"firstPostMoved\" label={app.translator.trans('sycho-move-posts.forum.badge.first_moved_tooltip')} icon=\"fas fa-exchange-alt\" />,\n        -20\n      );\n    }\n  });\n\n  // @ts-ignore\n  app.postComponents.postMoved = PostMovedPost;\n\n  // @ts-ignore\n  app.notificationComponents.postMoved = PostMovedNotification;\n\n  if (!app.data.resources[0].attributes.canMovePosts) {\n    return;\n  }\n\n  const state = new DiscussionPageState();\n\n  extend(CommentPost.prototype, 'oninit', function () {\n    this.subtree.check(() => state.selectedPostsToMove());\n  });\n\n  extend(Post.prototype, 'classes', function (classes: string[]) {\n    if (this.attrs.post.contentType() === 'comment' && state.has(this.attrs.post.id())) {\n      classes.push('Post--moving');\n    }\n  });\n\n  extend(CommentPost.prototype, 'headerItems', function (items) {\n    if (state.has(this.attrs.post.id())) {\n      items.add(\n        'moving',\n        <span className=\"PostMoving\">\n          {icon('fas fa-exchange-alt')} {app.translator.trans('sycho-move-posts.forum.post.moving')}\n        </span>\n      );\n    }\n  });\n\n  extend(DiscussionPage.prototype, 'oncreate', () => {\n    state.selectedPostsToMove([]);\n  });\n\n  extend(DiscussionPage.prototype, 'sidebarItems', function (items) {\n    if (state.selectedPostsToMove().length) {\n      items.add(\n        'movePosts',\n        <Button\n          icon=\"fas fa-exchange-alt\"\n          className=\"Button\"\n          onclick={() =>\n            app.modal.show(MovePostsModal, {\n              postIds: state.selectedPostsToMove(),\n              discussion: this.discussion,\n            })\n          }\n        >\n          {app.translator.trans('sycho-move-posts.forum.discussion.move_posts')}\n          <span className=\"MovePosts-Button-count\">{state.selectedPostsToMove().length}</span>\n        </Button>\n      );\n    }\n  });\n\n  extend(PostControls, 'moderationControls', function (items, post) {\n    if (post.contentType() !== 'comment') return;\n\n    const operation = state.has(post.id()) ? 'unmove' : 'move';\n\n    items.add(\n      'movePost',\n      <Button\n        icon=\"fas fa-arrow-right\"\n        onclick={() => {\n          if (operation === 'move') {\n            state.push(post.id());\n          } else {\n            state.remove(post.id());\n          }\n\n          m.redraw();\n        }}\n      >\n        {app.translator.trans(`sycho-move-posts.forum.post.${operation}`)}\n      </Button>\n    );\n  });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","DiscussionPageState","selectedPostsToMove","this","Stream","push","postId","remove","filter","id","has","includes","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","MovePostsModal","isLoading","newDiscussion","newDiscussionTitle","targetDiscussionId","search","GlobalSearchState","className","title","app","content","onsubmit","count","attrs","postIds","length","readonly","join","state","onchange","for","required","oninput","e","target","ignore","discussion","onSelect","type","loading","disabled","onclick","emulate","data","sourceDiscussionId","then","response","attributes","status","alertAttrs","m","redraw","preventDefault","url","method","body","errorHandler","error","errors","code","window","location","reload","Modal","PostMovedPost","icon","descriptionKey","descriptionData","post","target_discussion","href","route","near","number","targetDiscussionTitle","EventPost","PostMovedNotification","notification","translator","trans","Notification","Discussion","Model","extend","badges","isFirstMoved","add","label","CommentPost","subtree","check","Post","classes","contentType","items","DiscussionPage","PostControls","operation"],"sourceRoot":""}